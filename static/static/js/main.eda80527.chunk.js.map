{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Input","props","className","style","margin","label","name","value","onChange","float","App","state","isLoading","num_vars","num_clauses","clause_res","solution_res","handleGenerate","setState","fetch","mode","then","data","json","clauses","solution","alert","handleOnChange","event","val","target","test","this","onClick","width","disabled","marginTop","fontWeight","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qOAGMA,EAAQ,SAACC,GAAD,OACZ,sBAAKC,UAAU,MAAMC,MAAO,CAAEC,OAAQ,WAAtC,UACE,sBAAKF,UAAU,aAAf,UACE,uBAAOA,UAAU,cAAjB,SAAgCD,EAAMI,QACtC,uBACEC,KAAML,EAAMK,KACZC,MAAON,EAAMM,MACbC,SAAUP,EAAMO,SAChBL,MAAO,CAAEM,MAAO,SAChBP,UAAU,oBAGd,2BA6FWQ,E,4MAxFbC,MAAQ,CACNC,WAAW,EACXC,SAAU,GACVC,YAAa,GACbC,WAAY,KACZC,aAAc,M,EAEhBC,eAAiB,WACa,KAAxB,EAAKN,MAAME,UAA8C,KAA3B,EAAKF,MAAMG,aAI7C,EAAKI,SAAS,CAAEN,WAAW,IAC3BO,MAAM,qBAAD,OACkB,EAAKR,MAAME,SAD7B,wBACqD,EAAKF,MAAMG,aACnE,CAAEM,KAAM,YAEPC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GAAD,OACJ,EAAKJ,SAAS,CACZN,WAAW,EACXG,WAAYO,EAAKE,QACjBR,aAAcM,EAAKG,eAbvBC,MAAM,2D,EAiBVC,eAAiB,SAACC,GAChB,IAAIC,EAAMD,EAAME,OAAOvB,OACX,KAARsB,GACG,WAAWE,KAAKF,KAIvB,EAAKX,SAAL,eAAiBU,EAAME,OAAOxB,KAAOuB,K,4CAEvC,WACE,OACE,qBAAK3B,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,eAAd,iCACA,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CACEI,KAAK,WACLD,MAAM,sBACNE,MAAOyB,KAAKrB,MAAME,SAClBL,SAAUwB,KAAKL,iBAEjB,cAAC,EAAD,CACErB,KAAK,cACLD,MAAM,oBACNE,MAAOyB,KAAKrB,MAAMG,YAClBN,SAAUwB,KAAKL,iBAEjB,qBAAKzB,UAAU,YAAf,SACE,wBACE+B,QAASD,KAAKf,eACdd,MAAO,CAAE+B,MAAO,QAChBhC,UAAU,oBACViC,SAAUH,KAAKrB,MAAMC,UAJvB,SAMGoB,KAAKrB,MAAMC,UACV,qBAAKV,UAAU,iBAAf,SACE,sBAAMA,UAAU,cAGlB,eAIoB,MAAzB8B,KAAKrB,MAAMI,YACV,sBAAKZ,MAAO,CAAEiC,UAAW,QAAzB,UACE,uBAAOjC,MAAO,CAAEkC,WAAY,QAA5B,uBACA,4BAAIL,KAAKrB,MAAMI,gBAGS,MAA3BiB,KAAKrB,MAAMK,cACV,gCACE,uBAAOb,MAAO,CAAEkC,WAAY,QAA5B,wBACA,4BAAIL,KAAKrB,MAAMK,8B,GA/EbsB,aCPHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.eda80527.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst Input = (props) => (\n  <div className=\"row\" style={{ margin: \"5px 0px\" }}>\n    <div className=\"form-group\">\n      <label className=\"input-label\">{props.label}</label>\n      <input\n        name={props.name}\n        value={props.value}\n        onChange={props.onChange}\n        style={{ float: \"right\" }}\n        className=\"form-control\"\n      />\n    </div>\n    <br />\n  </div>\n);\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    num_vars: \"\",\n    num_clauses: \"\",\n    clause_res: null,\n    solution_res: null,\n  };\n  handleGenerate = () => {\n    if (this.state.num_vars === \"\" || this.state.num_clauses === \"\") {\n      alert(\"Please enter number of variables and number of clauses\");\n      return;\n    }\n    this.setState({ isLoading: true });\n    fetch(\n      `generate?num_vars=${this.state.num_vars}&num_clauses=${this.state.num_clauses}`,\n      { mode: \"no-cors\" }\n    )\n      .then((data) => data.json())\n      .then((data) =>\n        this.setState({\n          isLoading: false,\n          clause_res: data.clauses,\n          solution_res: data.solution,\n        })\n      );\n  };\n  handleOnChange = (event) => {\n    var val = event.target.value;\n    if (val !== \"\") {\n      if (!/^[0-9]+$/.test(val)) {\n        return;\n      }\n    }\n    this.setState({ [event.target.name]: val });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"title-header\">SAT research helper</h1>\n          <div className=\"container-fluid\">\n            <Input\n              name=\"num_vars\"\n              label=\"Number of variables\"\n              value={this.state.num_vars}\n              onChange={this.handleOnChange}\n            />\n            <Input\n              name=\"num_clauses\"\n              label=\"Number of clauses\"\n              value={this.state.num_clauses}\n              onChange={this.handleOnChange}\n            />\n            <div className=\"container\">\n              <button\n                onClick={this.handleGenerate}\n                style={{ width: \"100%\" }}\n                className=\"btn btn-secondary\"\n                disabled={this.state.isLoading}\n              >\n                {this.state.isLoading ? (\n                  <div className=\"spinner-border\">\n                    <span className=\"sr-only\" />\n                  </div>\n                ) : (\n                  \"Generate\"\n                )}\n              </button>\n            </div>\n            {this.state.clause_res != null && (\n              <div style={{ marginTop: \"10px\" }}>\n                <label style={{ fontWeight: \"bold\" }}>Clauses: </label>\n                <p>{this.state.clause_res}</p>\n              </div>\n            )}\n            {this.state.solution_res != null && (\n              <div>\n                <label style={{ fontWeight: \"bold\" }}>Solution: </label>\n                <p>{this.state.solution_res}</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}